
1 - Ordenação

import java.util.Arrays;
import java.util.Comparator;

public class TestCardway {
    public static void main(String[] args) {
        int[] arr = {3, 1, 4, 2, 5};
        int[] sortedArr = sortArray(arr);
        System.out.println(Arrays.toString(sortedArr));
    }

    public static int[] sortArray(int[] arr) {
        Integer[] boxedArray = Arrays.stream(arr).boxed().toArray(Integer[]::new);

        Arrays.sort(boxedArray, new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                if (a % 2 == 0 && b % 2 != 0) {
                    return -1;
                } else if (a % 2 != 0 && b % 2 == 0) {
                    return 1;
                } else if (a % 2 == 0 && b % 2 == 0) {
                    return Integer.compare(a, b);
                } else {
                    return Integer.compare(b, a);
                }
            }
        });

        return Arrays.stream(boxedArray).mapToInt(Integer::intValue).toArray();
    }
}

// Output: [2, 4, 1, 3, 5]

//-----------------------------------------------------------------

2 - Palindroma

public class Palindroma {
    public static void main(String[] args) {
        String input = "babad";
        System.out.println(longestPalindrome(input));
    }

    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private static int expandAroundCenter(String s, int left, int right) {
        int L = left, R = right;
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        return R - L - 1;
    }
}

// -----------------------------------------------------------------

3 - Debounce JS

function debounce(func, wait) {
    let timeout;
    return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}

const debouncedFunction = debounce(() => console.log("Chamado!"), 300);
debouncedFunction();

setTimeout(() => debouncedFunction(), 200);

setTimeout(() => debouncedFunction(), 400);

setTimeout(() => debouncedFunction(), 300);

// -------------------------------------------------------------

4 - Redução Personalizada

const items = [{ price: 10 }, { price: 20 }, { price: 15 }];

function calculateTotal(items, field) {
    return items.reduce((total, item) => total + item[field], 0);
}

const totalPrice = calculateTotal(items, 'price');
console.log(totalPrice);

//-------------------------------------------------------------

5 - React Hook Personalizado

import { useState, useEffect } from 'react';

const useFetch = (url) => {
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const result = await response.json();
                setData(result);
            } catch (error) {
                setError(error);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [url]);

    return { data, loading, error };
};

export default useFetch;

// ----------------------------------------------------------

6 - React Context API

import React, { createContext, useState, useContext } from 'react';


const AuthContext = createContext();


export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);

    const login = (username) => {
        setUser({ username });
    };

    const logout = () => {
        setUser(null);
    };

    return (
        <AuthContext.Provider value={{ user, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => {
    return useContext(AuthContext);
};

const ExampleComponent = () => {
    const { user, login, logout } = useAuth();

    return (
        <div>
            {user ? (
                <div>
                    <p>Welcome, {user.username}!</p>
                    <button onClick={logout}>Logout</button>
                </div>
            ) : (
                <button onClick={() => login('exampleUser')}>Login</button>
            )}
        </div>
    );
};

const App = () => {
    return (
        <AuthProvider>
            <ExampleComponent />
        </AuthProvider>
    );
};

export default App;

//---------------------------------------------------------

7 = Sistemas de Pedidos em java

import java.util.ArrayList;
import java.util.List;

class Order {
    private int orderId;
    private List<Item> items;
    private double discount;

    public Order(int orderId) {
        this.orderId = orderId;
        this.items = new ArrayList<>();
        this.discount = 0.0;
    }

    public void addItem(String name, double price) {
        items.add(new Item(name, price));
    }

    public void applyDiscount(double discountPercentage) {
        this.discount = discountPercentage;
    }

    public double getTotal() {
        double total = 0.0;
        for (Item item : items) {
            total += item.getPrice();
        }
        total -= total * (discount / 100);
        return total;
    }

    private class Item {
        private String name;
        private double price;

        public Item(String name, double price) {
            this.name = name;
            this.price = price;
        }

        public double getPrice() {
            return price;
        }
    }

    public static void main(String[] args) {
        Order order = new Order(1);
        order.addItem("Item 1", 10.0);
        order.addItem("Item 2", 15.0);
        order.applyDiscount(10);
        System.out.println(order.getTotal()); // Deve imprimir 22.5
    }
}

//---------------------------------------------------------

8 - Anagramas em java

import java.util.Arrays;

public class AnagramChecker {
    public static boolean areAnagrams(String str1, String str2) {
        if (str1.length() != str2.length()) {
            return false;
        }
        
        char[] charArray1 = str1.toCharArray();
        char[] charArray2 = str2.toCharArray();
        
        Arrays.sort(charArray1);
        Arrays.sort(charArray2);
        
        return Arrays.equals(charArray1, charArray2);
    }

    public static void main(String[] args) {
        String str1 = "listen";
        String str2 = "silent";
        
        boolean result = areAnagrams(str1, str2);
        System.out.println("Are the strings anagrams? " + result);
    }
}

//---------------------------------------------------------

9 - Fractional Knapsack

class Item {
    constructor(value, weight) {
        this.value = value;
        this.weight = weight;
    }
}

function fractionalKnapsack(items, capacity) {
    // Sort items by value to weight ratio in descending order
    items.sort((a, b) => (b.value / b.weight) - (a.value / a.weight));

    let totalValue = 0;
    for (let item of items) {
        if (capacity === 0) break;

        if (item.weight <= capacity) {
            // Take the whole item
            totalValue += item.value;
            capacity -= item.weight;
        } else {
            // Take the fraction of the item that fits
            totalValue += item.value * (capacity / item.weight);
            capacity = 0;
        }
    }

    return totalValue;
}

// Example usage:
const items = [
    new Item(60, 10),
    new Item(100, 20),
    new Item(120, 30)
];
const capacity = 50;

console.log("Maximum value in Knapsack =", fractionalKnapsack(items, capacity));

//---------------------------------------------------------

10 - Fibonacci Memoization

function fibonacci(n, memo = {}) {
    if (n in memo) return memo[n];
    if (n <= 1) return n;
    memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo);
    return memo[n];
}

console.log(fibonacci(10));

// Output: 55

//---------------------------------------------------------