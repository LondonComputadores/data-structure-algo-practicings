A- 57-Problems


1- Understanding the Problem

One of the best ways to figure out what you have to do is to
write it down.This is often called gathering
requirements, but I like to think of it as figuring out what
features the program should have.
Think of a few questions you could ask me that would let
you get a clearer picture of what I want. What do you need
to know to build this application?
Got some questions? Great. Here are some you might ask:

• What formula do you want to use? Can you explain how
the tip should be calculated?
• What’s the tip percentage? Is it 15% or should the user
be able to modify it?
• What should the program display on the screen when
it starts?
• What should the program display for its output? Do
you want to see the tip and the total or just the total?
Once you have the answers to your questions, try writing
out a problem statement that explains exactly what you’re
building. Here’s the problem statement for the program
we’re going to build:
Create a simple tip calculator. The program should prompt
for a bill amount and a tip rate. The program must compute
the tip and then display both the tip and the total amount of
the bill.
Example output:
What is the bill? $200
What is the tip percentage? 15
The tip is $30.00
The total is $230.00

------------------------------------------------------------------------

2- Discovering inputs, processes and outputs

An easy way to do that, if you
have a clear problem statement, is to look at the nouns and
verbs in that statement. The nouns end up becoming your
inputs and outputs, and the verbs will be your processes.
Look at the problem statement for our tip calculator:
Create a simple tip calculator. The program should prompt
for a bill amount and a tip rate. The program must compute
the tip and then display both the tip and the total amount of
the bill.
First, look for the nouns. Circle them if you like, or just make
a list. Here’s my list:
• bill amount
• tip rate
• tip
• total amount
Now, what about the verbs?
• prompt
• compute
• display
report erratum • discuss
Chapter 1. Turning Problems into Code • 3
So we know we have to prompt for inputs, do some calculations, and display some outputs. By looking at the nouns
and verbs, we can get an idea of what we’re being asked to
do. So with a little bit of sleuthing, we determine that our inputs,
processes, and outputs for this program look like this:
• Inputs: bill amount, tip rate
• Processes: calculate the tip
• Outputs: tip amount, total amount

-----------------------------------------------------------------------

3- Driving design with tests

So our test plan would look like this:
Input:
bill amount: 11.25
tip rate: 15
Expected result:
Tip: $1.69
Total: $12.94
We just used a test to design the functionality of our program;
we determined that our program will need to round up the answer.
Take the time to develop at least four test plans for every program,
and try to think of as many scenarios as you can for how
people might break the program. And as you get into the
more complicated problems, you may need a lot more test
plans.
You can find a list of testing
frameworks for many programming languages at
Wikipedia. You can read Kent Beck’s Test-Driven Development
By Example to gain more insight into how to design
code with tests, or you can investigate any number of more
language-specific resources on TDD.
So now that we have a clearer picture of the features the
program will have, we can start putting together the algorithm for the program.

------------------------------------------------------------------------------------

4- Writing the algo in pseudocode

There’s no “right way” to write pseudocode, although there
are some widely used terms. You might use Initialize to state
that you’re setting an initial value, Prompt to say that you’re
prompting for input, and Display to indicate what you’re
displaying on the screen.
Here’s how our tip calculator might look in pseudocode:
TipCalculator
Initialize billAmount to 0
Initialize tip to 0
Initialize tipRate to 0
Initialize total to 0
Prompt for billAmount with "What is the bill amount?"
Prompt for tipRate with "What is the tip rate?"
convert billAmount to a number
convert tipRate to a number
tip = billAmount * (tipRate / 100)
round tip up to nearest cent
total = billAmount + tip
Display "Tip: $" + tip
Display "Total: $" + total
End
That’s a rough stab at how our program’s algorithm will
look. We’ll have to set up some variables, make some decisions based on the input, do some conversions, and put some
output on the screen. I recommend including details like
variable names and text you’ll display on the screen in
pseudocode, because it helps you think more clearly about
the end result of the program.

----------------------------------------------------------------------------------------

5- Writing the code

Just keep these
constraints in mind as you do so:
Constraints
• Enter the tip as a percentage. For example, a 15% tip
would be entered as 15, not 0.15. Your program should
handle the division.
• Round fractions of a cent up to the next cent.
If you can’t figure out how to enforce these constraints, write
the program without them and come back to it later.

6- Challenges

• Ensure that the user can enter only numbers for the bill
amount and the tip rate. If the user enters non-numeric values, display an appropriate message and exit the
program. Here’s a test plan as an example:
Input:
bill amount: abcd
tip rate: 15
Expected result: Please enter a valid number for
the bill amount.
• Instead of displaying an error message and exiting the
program, keep asking the user for correct input until it
is provided.
• Don’t allow the user to enter a negative number.
• Break the program into functions that do the computations.
• Implement this program as a GUI program that automatically updates the values when any value changes.
• Instead of the user entering the value of the tip as a
percentage, have the user drag a slider that rates satisfaction with the server, using a range between 5% and
20%.

-----------------------------------------------------------------------------------------


Data Structures and Algorithms from Zero to Hero and Crack Top Companies 100+ Interview questions (Python Coding)

1- Understanding the problem

 - Can we restaste the problem in our own words?
 ex.: Implement addition

 - What are the inputs that go into the problem?
 ex.: Integer? Float?

 - What are the outputs that come from the problem?
 ex.: Integer? Float?

 - Can the outputs be determined from the inputs? In other words, do we have enough information to solve this problem?
 ex.: Yes

 - What should I label the important piece of data that are the part of a problem?
 ex.: Add, Sum


2- Examples

 - Simple examples:
	char_count("bbbb") # {b: 4}
	char_count("hello") # {h:1, e:1, l:2, o:1}

 - Complex examples:
	"A long frase in this Line" # If asked to count upper and lowercases separetely for example...

 - Empty examples:
	char_count("")

 - Invalid input examples:
	char_count(1)


3- Break it down (it is basically the same as to write down the steps it's needed to accomplish the task)

 - # Write down a function that takes in a string and returns the count of each character in the string!
   char_count("My name is Alex") # {'m':2, 'y':1, 'n':1, 'a':2, 'e':2, 'i':1, 's':1, 'l':1, 'x':1}
   def char_count(strn):
      # declare an object to return at the end
      # loop over the string:
	# if the char is letter and is in our object, add one to the value
	# if the char is letter and it is not in our object, add that char to our object with the value of one
      # return the object 

4- Solve or simplify

 - # Write down a function that takes in a string and returns the count of each character in the string!

   char_count("My name is Alex") # {'m':2, 'y':1, 'n':1, 'a':2, 'e':2, 'i':1, 's':1, 'l':1, 'x':1}

   def char_count(strn):

      # declare an object to return at the end
      result = {}
	
      # loop over the string:
      for i in strn.lower():

	# if the char is lowercase letter and is in our object, add one to the value
	  if i in result:
	     result[i] += 1
	
	# if the char is lowercase letter and it is not in our object, add that char to our object with the value of one
          else:
	      result[i] = 1
	
       # return the object
       return result

   print(char_count("hello"))
   print(char_count("My name is Alex"))


5- Refactor

 - # Write down a function that takes in a string and returns the count of each character in the string!

   char_count("My name is Alex") # {'m':2, 'y':1, 'n':1, 'a':2, 'e':2, 'i':1, 's':1, 'l':1, 'x':1}

   def char_count(strn):

      # declare an object to return at the end
      result = {}
	
      # loop over the string:
      for i in strn.lower():

	# if the char is lowercase letter and is in our object, add one to the value
          if isinstance(i, str) and not(i.isspace()):     # This is the only line was refactored.
	     if i in result:
	        result[i] += 1
	
	# if the char is lowercase letter and it is not in our object, add that char to our object with the value of one
          else:
	      result[i] = 1
	
       # return the object
       return result

   #print(char_count("hello"))
   print(char_count("My name is Alex"))


